<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yeatzhang's Blog]]></title>
  <link href="http://yeatszhang.github.io/atom.xml" rel="self"/>
  <link href="http://yeatszhang.github.io/"/>
  <updated>2016-01-13T14:58:00+08:00</updated>
  <id>http://yeatszhang.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[React 0.14 更新]]></title>
    <link href="http://yeatszhang.github.io/14443597956045.html"/>
    <updated>2015-10-09T11:03:15+08:00</updated>
    <id>http://yeatszhang.github.io/14443597956045.html</id>
    <content type="html"><![CDATA[
<p>看 <a href="https://facebook.github.io/react/blog/#deprecation-of-react-tools">react 0.14 changelog</a> 时简单地记录了下重点。</p>

<h2 id="toc_0">install</h2>

<p>在development环境下react会做warning检查，使用NODE_ENV=production来避免检查，提高react的速度。</p>

<h2 id="toc_1">major change</h2>

<h3 id="toc_2">Two Packages: React and React DOM</h3>

<p>拆分为 <code>react</code> <code>react-dom</code> 两个类库。</p>

<ul>
<li>react

<ul>
<li>createElement</li>
<li>createClass</li>
<li>Component</li>
<li>PropTypes</li>
<li>Children</li>
</ul></li>
<li>react-dom

<ul>
<li>render</li>
<li>unmountComponentAtNode</li>
<li>findDOMNode</li>
<li>react-dom/server

<ul>
<li>renderToString</li>
<li>renderToStaticMarkup</li>
</ul></li>
</ul></li>
<li><p>addons 被移到独立的包中</p>

<ul>
<li>react-addons-clone-with-props</li>
<li>react-addons-create-fragment</li>
<li>react-addons-css-transition-group</li>
<li>react-addons-linked-state-mixin</li>
<li>react-addons-perf</li>
<li>react-addons-pure-render-mixin</li>
<li>react-addons-shallow-compare</li>
<li>react-addons-test-utils</li>
<li>react-addons-transition-group</li>
<li>react-addons-update</li>
<li>ReactDOM.unstable_batchedUpdates in react-dom.</li>
</ul>

<h3 id="toc_3">dom node refs</h3>

<p>自定义的组件 refs 得到的跟以前一样是react component，而内置的组件得到的是真实的dom节点，不需要再通过<code>this.refs.giraffe.getDOMNode()</code>来得到真实的dom节点。</p></li>
</ul>

<pre><code>var Zoo = React.createClass({
    render: function() {
        return &lt;div&gt;Giraffe name: &lt;input ref=&quot;giraffe&quot; /&gt;&lt;/div&gt;;
    },
    showName: function() {
        // Previously: var input = this.refs.giraffe.getDOMNode();
        var input = this.refs.giraffe;
        alert(input.value);
    }
});
</code></pre>

<h3 id="toc_4">Stateless functional components</h3>

<p>对于简单的无状态的组件（只有一个render函数），提供新的更加简单的语法去声明。</p>

<pre><code>// A functional component using an ES2015 (ES6) arrow function:
var Aquarium = (props) =&gt; {
  var fish = getFish(props.species);
  return &lt;Tank&gt;{fish}&lt;/Tank&gt;;
};

// Or with destructuring and an implicit return, simply:
var Aquarium = ({species}) =&gt; (
  &lt;Tank&gt;
    {getFish(species)}
  &lt;/Tank&gt;
);

// Then use: &lt;Aquarium species=&quot;rainbowfish&quot; /&gt;
</code></pre>

<ul>
<li>表现跟只有一个<code>render</code>函数的组件一样</li>
<li>由于不会创建实例，添加的<code>ref</code>将会返回<code>null</code></li>
<li>函数声明的组件将没有<code>lifecycle</code>函数，但是可以将<code>.propTypes</code> 和 <code>.defaultProps</code> 设置为该函数的属性</li>
</ul>

<h3 id="toc_5">react-tools 被取消</h3>

<p>使用 <code>babel</code> 对 <code>jsx</code> 进行编译</p>

<h2 id="toc_6">Breaking changes</h2>

<ul>
<li>React.initializeTouchEvents 被移除，默认支持 touch 事件</li>
<li>Add-Ons: Due to the DOM node refs change mentioned above, TestUtils.findAllInRenderedTree and related helpers are no longer able to take a DOM component, only a custom component.</li>
</ul>

<p>会产生警告的改变</p>

<ul>
<li>props 现在不可改变， 使用 React.cloneElement</li>
<li>React.children 不支持使用 Plain Object，使用array作为替代。也可以使用 <code>createFragment</code> 来进行迁移</li>
<li>Add-Ons classSet 被移除， 使用 <code>classnames</code> </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redux 源码解读]]></title>
    <link href="http://yeatszhang.github.io/14424564517620.html"/>
    <updated>2015-09-17T10:20:51+08:00</updated>
    <id>http://yeatszhang.github.io/14424564517620.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">前言</h2>

<p>redux并不局限于flux与react。redux 自身保持简洁以便适配各种场景，让社区发展出各种 redux-* 中间件或者插件，从而形成它自己的生态系统。</p>

<h2 id="toc_1">主要关系</h2>

<ul>
<li>reducer 声明了state的初始值，以及当前state接受action对象之后处理为new state的逻辑。</li>
<li>createStore接受reducer作为参数，返回产生的store，store其实是一个含有state的闭包，以及提供将action分发给reducer的dispatch方法。</li>
<li>applyMiddlewares方法接受n个middlewares作为参数返回一个用于渲染creatorStore函数的方法。</li>
<li>applyMiddleware可以向actionCreator提供store.dispatch以及getState方法，用以增强actionCreator的能力</li>
</ul>

<p>store主要包含以下三个核心方法:</p>

<ul>
<li>subscribe  注册store更新之后的回调函数</li>
<li>getState     获取store当前state的引用，切记直接修改返回的结果</li>
<li>dispatch     将action按顺序经过各middle处理后派发给reducer</li>
</ul>

<h2 id="toc_2">action 流程图</h2>

<p><img src="http://7xksmv.com1.z0.glb.clouddn.com/redux-action+%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="流程图"/></p>

<h2 id="toc_3">createStore</h2>

<p>createStore是根据reducer中的规则创建store的方法。</p>

<h3 id="toc_4">特性</h3>

<ol>
<li>提供dispatch</li>
<li>subscribe</li>
<li>getState     // getState拿到的是state的引用！不要直接修改</li>
<li>提供初始值initialState</li>
</ol>

<h3 id="toc_5">源码</h3>

<pre><code>//此处为示意，不是 redux 的源码本身
export default createStore(reducer, initialState) {
    //闭包私有变量
    let currentState = initialState
    let currentReducer = reducer
    let listeners = []

    //返回一个包含可访问闭包变量的公有方法
    return {
        getState() {
            return currentState //返回当前 state
        },
        subscribe(listener) {
            let index = listeners.length
            listeners.push(listener) //缓存 listener
            return () =&gt; listeners.splice(i, 1) //返回删除该 listener 的函数
        },
        dispatch(action) {
            //更新 currentState
            currentState = currentReducer(currentState, action)
            // 可以看到这里并没有用到eventEmitter等
            listeners.slice().forEach(listener =&gt; listener())
            return action //返回 action 对象
        }
    }
}
</code></pre>

<h2 id="toc_6">action</h2>

<p>action有以下特点：</p>

<ul>
<li>pure object</li>
<li>描述reducer响应的事件类型</li>
<li>携带所需要的数据</li>
</ul>

<h2 id="toc_7">actionCreator</h2>

<p>用于描述action的dispatch的逻辑。</p>

<ul>
<li>action的重用</li>
<li>数据的预处理</li>
<li>action的特殊处理逻辑</li>
</ul>

<h2 id="toc_8">reducer</h2>

<p>reducer应该是是一个无副作用函数，以当前的state以及action为参数，返回新的state。<br/>
每次返回一个新State的好处是在shouldComponentUpdate过程中可以使用高性能的shallow equal。</p>

<ol>
<li>pure function</li>
<li>接受initialState</li>
<li>don&#39;t modify the state!!!</li>
</ol>

<pre><code>//reducer 接受两个参数，全局数据对象 state 以及 action 函数返回的 action 对象
//返回新的全局数据对象 new state
export default (state, action) =&gt; {
    switch (action.type) {
        case A:
        return handleA(state)
        case B:
        return handleB(state)
        case C:
        return handleC(state)
        default:
        return state //如果没有匹配上就直接返回原 state
    }
}
</code></pre>

<h2 id="toc_9">combineReducers</h2>

<p>将一个reducer map转换为一个reducer。方便对复杂的reducer进行功能拆分。</p>

<h3 id="toc_10">problem</h3>

<ol>
<li>state 结构太复杂</li>
<li>希望根据对应的component进行维护</li>
</ol>

<h3 id="toc_11">how to use</h3>

<pre><code>var reducers = {
    todos: (state, action) { //预期此处的 state 参数是全局 state.todos 属性
        switch (action.type) {...} //返回的 new state 更新到全局 state.todos 属性中
    },
    activeFilter: (state, action) { //预期拿到 state.activeFilter 作为此处的 state
        switch (action.type) {...} //new state 更新到全局 state.activeFilter 属性中
    }
}

//返回一个 rootReducer 函数
//在内部将 reducers.todos 函数的返回值，挂到 state.todos 中
//在内部将 reducers.activeFilter 函数的返回值，挂到 state.activeFilter 中
var rootReducer = combineReducers(reducers)
</code></pre>

<h3 id="toc_12">源码</h3>

<pre><code>//combination 函数是 combineReducers(reducers) 的返回值，它是真正的 rootReducer
//finalReducers 是 combineReducers(reducers) 的 reducers 对象去掉非函数属性的产物
 //mapValue 把 finalReducers 对象里的函数，映射到相同 key 值的新对象中
function combination(state = defaultState, action) {
    var finalState = mapValues(finalReducers, (reducer, key) =&gt; {
      var newState = reducer(state[key], action); //这里调用子 reducer
      if (typeof newState === &#39;undefined&#39;) {
        throw new Error(getErrorMessage(key, action));
      }
      return newState; //返回新的子 state
    });
    //...省略一些业务无关的代码
    return finalState; //返回新 state
 };

function mapValues(obj, fn) {
  return Object.keys(obj).reduce((result, key) =&gt; {
    result[key] = fn(obj[key], key);
    return result;
  }, {});
}

</code></pre>

<h2 id="toc_13">applyMiddleWares</h2>

<h3 id="toc_14">problem</h3>

<ul>
<li>异步action</li>
<li>promise</li>
<li>个性化 action 响应</li>
<li>log</li>
</ul>

<h3 id="toc_15">描述</h3>

<p>接受 middleWares 将 store 修饰为使用了 middlwares 的 store，其实是用被高阶函数修饰过的dispatch替换掉了原来的dispatch。</p>

<h3 id="toc_16">usage</h3>

<pre><code>var craeteStoreWithMiddleWare = applyMiddleWare(thunk)(createStore);
//redux-thunk
export default function thunkMiddleware({ dispatch, getState }) {
  return next =&gt; action =&gt;
    typeof action === &#39;function&#39; ? // action 居然是函数而不是 plain object？
      action(dispatch, getState) : //在中间件里消化掉，让该函数控制 dispatch 时机
      next(action); //否则调用 next 让其他中间件处理其他类型的 action
}
</code></pre>

<h3 id="toc_17">源码</h3>

<p>这里的composeMiddleware可能不是很好理解，这里有一个简单的例子方便大家理解。<a href="http://jsbin.com/xalunadofa/1/edit?js,console">http://jsbin.com/xalunadofa/1/edit?js,console</a>。 compose可以理解为倒叙一层层打包的过程，因此最后调用composedFunction的时候会顺序进入各个middlewares。</p>

<pre><code>function applyMiddleware(...middlewares) {
  return next =&gt; (...args) =&gt; {
    const store = next(...args);
    const middleware = composeMiddleware(...middlewares);

      // dispatch 被middlWare修饰
    function dispatch(action) {
      const methods = {
        dispatch,
        getState: store.getState
      };

      return compose(
        middleware(methods),
        store.dispatch
      )(action);
    }

      // 返回新的store dispatch被新的dispatch替代
    return {
      ...store,
      dispatch
    };
  };
}

</code></pre>

<h2 id="toc_18">bindActionCreator</h2>

<h3 id="toc_19">源码</h3>

<pre><code>//将 actionCreator 跟 dispatch 绑定在一起
let bindActionCreator =&gt; (actionCreator, dispatch) {
  return (...args) =&gt; dispatch(actionCreator(...args));
}

function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === &#39;function&#39;) { //如果是单个 actionCreator，绑定一词
    return bindActionCreator(actionCreators, dispatch);
  }
  //返回一个改造过的「函数组合」
  return mapValues(actionCreators, actionCreator =&gt;
    bindActionCreator(actionCreator, dispatch)
  )
}
</code></pre>

<h2 id="toc_20">connector</h2>

<p>connector 接受mapStateToProps, mapDispatchToProps, Component 三个参数，返回一个能够自动关联store中state以及dispatch事件的smart component</p>

<p>由于connector代码过长，只对重要的几个函数进行说明。<br/>
connetor函数接受的两个参数指明从store的state中挑选哪些作为props，以及将哪些actionCreator绑定到porps中。<br/>
订阅store的change事件，当store更新时计算新的state，与旧state进行浅对比，如果不同则更新state，并render，否则不进行render。</p>

<pre><code>    // 根据从store中select的state以及dispatch绑定的actionCreator计算新的props
   computeNextState(props = this.props) {
     return computeNextState(
       this.stateProps,
       this.dispatchProps,
       props
     );
   }

    // 与旧值进行shallow equal
   updateState(props = this.props) {
     const nextState = this.computeNextState(props);
     if (!shallowEqual(nextState, this.state.props)) {
       this.setState({
         props: nextState
       });
     }
   }

    // 订阅change事件
   trySubscribe() {
     if (shouldSubscribe &amp;&amp; !this.unsubscribe) {
       this.unsubscribe = this.store.subscribe(::this.handleChange);
       this.handleChange();
     }
   }

   tryUnsubscribe() {
     if (this.unsubscribe) {
       this.unsubscribe();
       this.unsubscribe = null;
     }
   }

   componentDidMount() {
     this.trySubscribe();
   }


   componentWillUnmount() {
     this.tryUnsubscribe();
   }

   handleChange() {
     if (!this.unsubscribe) {
       return;
     }

     if (this.updateStateProps()) {
       this.updateState();
     }
   }

</code></pre>

<h2 id="toc_21">结语</h2>

<p>欢迎大家发起pr完善文档，进行讨论。</p>

<h2 id="toc_22">参考资料</h2>

<ul>
<li><a href="http://div.io/topic/1309">深入到源码：解读 redux 的设计思路与用法</a></li>
<li><a href="http://rackt.github.io/redux/index.html">redux git book</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[impress.js 使用总结]]></title>
    <link href="http://yeatszhang.github.io/14423832687955.html"/>
    <updated>2015-09-16T14:01:08+08:00</updated>
    <id>http://yeatszhang.github.io/14423832687955.html</id>
    <content type="html"><![CDATA[
<p>在美团参加 hackathon 时，使用 impress.js 只做了一个商家上线流程的复盘工具。觉得 impress.js 很适合用于做 presentation， 因此进行一个简单地总结。</p>

<h2 id="toc_0">what is impress.js</h2>

<p>impress.js 是一个用于展示的前端框架，基于大量 css3 的动画等特性。最大的特点是其基于 transform 来构建，通过空间位置的移动以及旋转来体现变化，视觉冲击性很强。<br/>
可以在<a href="https://github.com/impress/impress.js?utm_content=buffer4bb8d&amp;utm_source=buffer&amp;utm_medium=twitter&amp;utm_campaign=Buffer">github</a>上查看 example 和 demo。</p>

<h2 id="toc_1">如何用 impress.js 设计 presentation</h2>

<p>其实作者制作的 <a href="http://bartaz.github.io/impress.js/#/bored">demo</a> 就几乎将所有可能用到的技巧都包含了，并在 github 中提供了源码，不过如果不仔细读源码的话很可能走很多弯路。</p>

<h3 id="toc_2">基本思路</h3>

<p>其实作者的想法很巧妙也很简单，impress.js 会根据 html 中 step 的顺序来渲染整个页面，对于每个页面来说只有三种重要的属性——scale，position，rotate。</p>

<ul>
<li>scale 决定了该页的大小。对应属性 width，height</li>
<li>position 决定了在三维空间中的坐标。对应属性 transform</li>
<li>rotate 则是旋转方式。对应属性 rotate[XYZ]

<ul>
<li>绕 X 轴</li>
<li>绕 Y 轴</li>
<li>绕 Z 轴</li>
</ul></li>
</ul>

<p>impress.js 会根据这些属性将每一页进行渲染，最后从第一页开始一步步进行播放，因此这些属性也就决定了补间动画的形式。在开始写代码之前一定要想好空间结构。</p>

<h2 id="toc_3">技巧总结</h2>

<p>虽然第一眼看过去很容易，可如果想做一个定制性很强的ppt还是会遇到很多问题，在这里总结一些经验与技巧。</p>

<h3 id="toc_4">设置补间动画</h3>

<p>在 impress.js 文件中可以设置一些默认值，我会慢慢对这些参数进行说明。</p>

<pre><code>// some default config values.
    var defaults = {
        width: 1024,
        height: 768,
        maxScale: 1,
        minScale: 0,

        perspective: 1000,

        transitionDuration: 700
    };
</code></pre>

<h4 id="toc_5">画布大小</h4>

<p><code>width</code>与<code>height</code>是每页的基准长度和宽度，与 scale 相乘之后才是该页的大小，设置<strong>偏移量</strong>时需要对<code>width</code>与<code>height</code>进行参考。</p>

<p>以下是计算 window  真实比例的代码。</p>

<pre><code>var computeWindowScale = function ( config ) {
        var hScale = window.innerHeight / config.height,
            wScale = window.innerWidth / config.width,
            scale = hScale &gt; wScale ? wScale : hScale;

        if (config.maxScale &amp;&amp; scale &gt; config.maxScale) {
            scale = config.maxScale;
        }

        if (config.minScale &amp;&amp; scale &lt; config.minScale) {
            scale = config.minScale;
        }

        return scale;
    };
</code></pre>

<p>可以知道画布会随着<code>window</code>的缩放而自动进行缩放，<code>maxScale</code>决定了画布最大值，而<code>minScale</code>决定了最小为多大。千万不要将这里的<code>scale</code>与<code>data-scale</code>搞混淆。</p>

<h4 id="toc_6">透明度</h4>

<p><code>.impress-enabled .step</code> 调整 opacity 来控制非当前页的透明度</p>

<h4 id="toc_7">渐变动画时间</h4>

<p>需要注意的是在更改 <code>default</code> <code>transitionDuration</code>之后还需要在 css 中修改 <code>transitionDuration</code>。这样才能保证动画的同步。</p>

<h3 id="toc_8">实用的 class</h3>

<h4 id="toc_9">body 状态</h4>

<ul>
<li><code>impress-disabled</code> is added to body element by the impress.js script<br/></li>
<li><code>impress-enabled</code> after init() function is called</li>
</ul>

<h4 id="toc_10">page 状态</h4>

<p>additional past, present and future classes are added to step elements。通过这三个状态可以做出很酷的动画效果。</p>

<ul>
<li><code>future</code> class appears on steps that were not yet visited</li>
<li><code>present</code> class appears on currently visible step - it&#39;s different from active class as present class is added when transition finishes (step is entered)</li>
<li><code>past</code> class is added to already visited steps (when the step is left)</li>
</ul>

<h2 id="toc_11">插件推荐</h2>

<ul>
<li>impress-progress.js 显示 ppt 的进度条</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React使用总结]]></title>
    <link href="http://yeatszhang.github.io/14423832514781.html"/>
    <updated>2015-09-16T14:00:51+08:00</updated>
    <id>http://yeatszhang.github.io/14423832514781.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">两种架构</h2>

<p>现在使用React的开发模式主要有两种——freeMarker+React以及纯静态React页面开发。本文着重介绍纯静态React页面的开发方式。</p>

<h3 id="toc_1">freeMarker+React</h3>

<p>由于以前是用YUI+freeMarker进行开发，为了保证以前的页面都能够正常访问，当重构老页面时会使用这种开发方式。<br/>
在这种开发模式下由java利用freeMarker生成并Render为html，通过browserify将js打包至资源目录并在browser中加载，React将app render至div中。</p>

<h3 id="toc_2">React纯静态页面</h3>

<p>利用browserify使用同构的方式进行开发，直接产出html以及js文件放置到资源文件中通过文件路径访问页面。采用这种方式开发有以下优点：</p>

<ul>
<li>PreRender产出的静态资源文件加载速度快</li>
<li>前后端只通过ajax进行交互，使得前后端分离，各自约定好接口之后就能进行开发。</li>
<li>同构的开发模式使得功能模块可以复用，比如模板、node的一些常用模块等等。</li>
</ul>

<p>需要注意代码能同时在browser与node环境下执行，否则会出问题。当使用bom对象时，在componentDidMount生命周期中运行，此时node环境下已经完成了first render。</p>

<h2 id="toc_3">构建方式</h2>

<p>在node环境下通过<code>React.renderToString</code>方法生成html，通过这种方式生成的标签会带有data-reactid属性，储存server render结果的校验值。<br/>
当在browser中<code>React.render</code>时会检查校验值是否一致，保证node以及browser环境下render的结果一致。因此开发过程中一定要保证render的结果保持一致，如果需要在browser中插入dom节点，可以使用insert等操作。禁止state以及props在两个环境下值不同。<br/>
如果通过校验，则React不会重新生成dom，只将事件监听器挂载在对应的节点下。</p>

<h2 id="toc_4">应用架构</h2>

<p>采用flux的思想来组织应用，具体的方案我推荐facebook的flux或者reflux，这也是现在Github中获星最多的flux实现方案。两者的主要区别是reflux不通过Dispatcher来控制action的分发，reflux中使用了较多的magic来使得代码更加简洁高效。</p>

<p>如果项目的复杂程度不高（没有多个互相关联的store），我推荐使用Reflux，一般情况下其实一个store就够了，而且避免了处理store之间的通信问题。</p>

<pre><code>╔═════════╗       ╔════════╗       ╔═════════════════╗
║ Actions ║──────&gt;║ Stores ║──────&gt;║ View Components ║
╚═════════╝       ╚════════╝       ╚═════════════════╝
     ^                                      │
     └──────────────────────────────────────┘
</code></pre>

<p>若项目较为庞大，考虑到代码的可控性、直观，以及更好地去控制各store之间的响应逻辑，使用flux更合适。</p>

<h3 id="toc_5">优点</h3>

<p>采用flux来构建应用有以下优势：</p>

<ol>
<li>将state在store中统一进行管理，实现业务与组建的分离，代码结构更加清晰。</li>
<li>由于action在store中进行监听，因此事件不需要再一层层通过props来进行传递，简化代码，而且也更容易将应用拆分成更细粒度的模块。</li>
<li>尽量使用props的情况下，代码可预测性很强。</li>
</ol>

<h2 id="toc_6">组件开发</h2>

<ol>
<li>react认为组件就是一个状态集，尽可能使得组件只拥有props。</li>
<li>当组件需要有自己的处理逻辑时需要用到state,比如控制input的value，弹出层自动隐藏、显示的逻辑等等。</li>
<li>state并不会随着porps的更新而改变，因此在使用 state 时一定要注意是否有 componentWillReceiveProps。</li>
<li>业务代码为了方便以及速度可以不写 PropTypes，但是可复用的组件使用 PropTypes 来保证组件的正常运行是必要的，组件中的工具方法可以抽取出来写测试用例。</li>
</ol>

<h3 id="toc_7">setState</h3>

<p>state为key-value的集合，一般来说value都是基本类型，当state的数据结构层次很深的时候，操作state就会变成很头疼的事情。</p>

<p><strong>深拷贝</strong></p>

<pre><code>// shallow copy
var state = deepCopy(this.state);
state.valueWantChange = vale;
this.setState(state);
</code></pre>

<p>深拷贝方法没有问题，但由于deepCopy效率很低，一般都不推荐使用。</p>

<p><strong>forceUpdate</strong></p>

<pre><code>this.state.valueWantChange = vale;
this.forceUpdate(); // this.setState(this.state);
</code></pre>

<p>在以下两种情况会用到 forceUpdate</p>

<ul>
<li>手动更改了 state 之后需要触发 render</li>
<li>做了除更改props和state之外的操作后，需要render。</li>
</ul>

<p>但是使用forceUpdate 会跳过 shouldComponentUpdate 的过程，会触发子组件的所有lifeCycle方法（包括shouldComponentUpdate）从而造成性能的浪费。因此为了组件更加清晰高效，应该避免使用forceUpdate。</p>

<p><strong>Immutability Helpers</strong></p>

<p>我推荐使用React.addons<code>import react from &#39;react/addons&#39;</code>来管理<code>state</code>。<br/>
You can alleviate this by only copying objects that need to be changed and by reusing the objects that haven&#39;t changed. </p>

<pre><code>var newData = React.addons.update(myData, {
  x: {y: {z: {$set: 7}}},
  a: {b: {$push: [9]}}
});
this.setState(newData);
</code></pre>

<p>下面是update的基本语法。如果用过mongo应该对此十分熟悉。</p>

<p><code>React.addons.update</code><br/>
* <code>{$push: array}</code> push() all the items in array on the target.<br/>
* <code>{$unshift: array}</code> unshift() all the items in array on the target.<br/>
* <code>{$splice: array of arrays}</code> for each item in arrays call splice() on the target with the parameters provided by the item.<br/>
* <code>{$set: any}</code> replace the target entirely.<br/>
* <code>{$merge: object}</code> merge the keys of object with the target.<br/>
* <code>{$apply: function}</code> passes in the current value to the function and updates it with the new returned value.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[openlayers with google maps 简单教程]]></title>
    <link href="http://yeatszhang.github.io/14423832214120.html"/>
    <updated>2015-09-16T14:00:21+08:00</updated>
    <id>http://yeatszhang.github.io/14423832214120.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">what is openlayer</h2>

<p>openlayers是一个高性能、功能全面的地图库。有以下特性：</p>

<ol>
<li>支持各种格式的tiled layers数据</li>
<li>使用canvas的高性能vector layer</li>
<li>细粒度丰富的交互操作</li>
<li>支持commanjs风格</li>
<li>开源免费</li>
</ol>

<h2 id="toc_1">why use it</h2>

<p>一般来说google map api就满足需求了，但是当需要在地图上绘制大量节点时，使用svg来显示部件就会出现很严重的性能问题，一般情况下google maps等的编辑操作也不够流畅。而openlayers使用canvas作为矢量层，大量的点线面信息对于canvas的影响是较小的，而且canvas的交互也更加流畅。</p>

<h2 id="toc_2">why write this article</h2>

<ol>
<li>与高德地图、google maps、百度地图等国内常用地图没有很方便的接口</li>
<li>大版本更新后官方文档不全面而且不够清晰，没有guild</li>
<li>而且网上简明详细的教程很少</li>
</ol>

<p>针对以上几点，觉得自己的小经验会对大家有所帮助，可以少走些弯路，也是对自己这几天工作的一个总结。</p>

<h2 id="toc_3">a simple example(step by step)</h2>

<p>下面通过一个简单地小例子介绍openlayers的一些基本用法，以及我觉得重要的地方。</p>

<h2 id="toc_4">需求</h2>

<p>需要使用google map或者高德地图作为底图，在地图上绘制一个矩形，实现矩形的编辑并且能够得到矩形被修改之后的回调函数。大概会涉及到这些技术点：</p>

<ol>
<li>如何与google map等地图组合使用</li>
<li>知道坐标数组或者某格式的geo数据，如何在地图上添加feature</li>
<li>完成feature的修改</li>
<li>得到feature修改后的回调方法</li>
</ol>

<p>附上简单截图</p>

<h2 id="toc_5">初始化地图</h2>

<p>我们希望openlayer能和google map等组合使用，但是由于google等地图厂商不愿意向openlayer“妥协”，因此现在无法直接使用<code>Tiled Layers</code>，但我们可以将openlayer与地图api组合起来使用。</p>

<p>只使用地图的底图，在底图上覆盖一层 openlayer 的 canvas 层来显示数据并拦截与底图之间的交互，通过地图的 api 来重设状态。<br/>
此方案还有以下优点：</p>

<ol>
<li>解决了页面节点过多之后的性能问题 </li>
<li>底图可以被抽象出去，能够在不影响交互逻辑的基础上更换底图。</li>
</ol>

<p>代码如下：</p>

<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Snap interaction example&lt;/title&gt;
  &lt;script src=&quot;https://code.jquery.com/jquery-1.11.2.min.js&quot;&gt;&lt;/script&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css&quot;&gt;
  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/ol3/3.6.0/ol.css&quot; type=&quot;text/css&quot;&gt;
  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/ol3/3.6.0/ol.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://maps.googleapis.com/maps/api/js&quot;&gt;&lt;/script&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    div.fill {
      width: 100%;
      height: 100%;
    }

    .map {
      width: 800px;
      height: 400px;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;container-fluid&quot;&gt;
  &lt;div class=&quot;row-fluid&quot;&gt;
    &lt;div class=&quot;span12&quot;&gt;
      &lt;div id=&quot;map&quot; class=&quot;map&quot;&gt;
        &lt;!-- gmap用于加载google maps， olmap用于加载openlayer canvas。
        目标是加载完毕之后olmap覆盖与gmap之上并且拦截交互操作。
        开始时放在同一层的好处是都能根据父节点来设置长宽。也可以在js中动态生成div，渲染后插入 --&gt;
        &lt;div id=&quot;gmap&quot; class=&quot;fill&quot;&gt;&lt;/div&gt;
        &lt;div id=&quot;olmap&quot; class=&quot;fill&quot;&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script type=&quot;application/javascript&quot;&gt;
  // 加载google map并禁用地图的交互操作
  var gmap = new google.maps.Map(document.getElementById(&#39;gmap&#39;), {
    disableDefaultUI: true,
    keyboardShortcuts: false,
    draggable: false,
    disableDoubleClickZoom: true,
    scrollwheel: false,
    streetViewControl: false
  });

  // ol.View 是openlayers用于控制地图的 坐标系标准 zoom center rotate等操作的对象，在实例化map时候需要使用
  var view = new ol.View({
    // make sure the view doesn&#39;t go beyond the 22 zoom levels of Google Maps
    maxZoom: 21,
    projection: &#39;EPSG:4326&#39; // 设置为标准经纬度的坐标标准，十分重要！ 默认是&#39;EPSG:3857&#39;
  });

  // view 拖动时触发事件，根据当前的坐标转化为经纬度，调用谷歌地图setCenter方法同步地图位置
  view.on(&#39;change:center&#39;, function () {
    var center = view.getCenter();
    gmap.setCenter(new google.maps.LatLng(center[1], center[0])); // 注意顺序
  });

  // 同上，更改焦距时触发的时间
  view.on(&#39;change:resolution&#39;, function () {
    gmap.setZoom(view.getZoom());
  });

  // ol.source.Vector 作为 ol.layer.Vector的数据集，增删改feature的方法由source提供
  var vectorSource = new ol.source.Vector();

  var vector = new ol.layer.Vector({
    source: vectorSource
  });

  var olMapDiv = document.getElementById(&#39;olmap&#39;);
  var map = new ol.Map({
    layers: [vector], // 所使用的图层
    // 禁用掉默认的拖动、旋转等交互
    interactions: ol.interaction.defaults({
      altShiftDragRotate: false,
      dragPan: false,
      rotate: false
    }).extend([new ol.interaction.DragPan({kinetic: null})]),
    target: olMapDiv,
    view: view  // 这里可以使用 new ol.View({options}) 但是在这里需要通过手动设置来触发google maps调节到正确地zoom与center
  });
  view.setCenter([10.689697265625, -25.0927734375]); // 如果未设置view的坐标标准，这里千万要注意不要直接写经纬度
  view.setZoom(6);  // 设置缩放等级
  
  // 将openlayers容器放置到google地图容器中
  olMapDiv.parentNode.removeChild(olMapDiv);
  gmap.controls[google.maps.ControlPosition.TOP_LEFT].push(olMapDiv);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>有了这段代码应该就有了一个可以拖动缩放的地图了。</p>

<h2 id="toc_6">添加feature</h2>

<p>当然光有一个地图是不行的，如果需要往地图上面添加feature怎么办呢？大致有以下两种场景：</p>

<ol>
<li>提供整个地图的信息描述数据，比如geoJson，WKT或者自定义的数据结构等，需要解析整个数据并批量显示在地图上。</li>
<li>拿到某个feature的坐标数据，需要添加到地图上，并实现特异化的控制。</li>
</ol>

<h3 id="toc_7">批量添加数据</h3>

<p>先上代码</p>

<pre><code class="language-javascript">/**
   * 将geoJson字符串解析后添加到地图中
   * @param vectorSource {ol.source.Vector} 需要添加feature的矢量层数据对象
   * @param data {string} geoJson字符串
   */
  function addFeatures(vectorSource, data){
 vectorSource.addFeatures(ol.format.GeoJSON.readFeatures(data, {
      // 数据的坐标code
      dataProjection: &#39;EPSG:3857&#39;,
      // 地图view使用的坐标code
      featureProjection: &#39;EPSG:4326&#39;
    }));
  }
</code></pre>

<p><code>ol.format</code>下有很多种数据类型，选择匹配的数据格式。<br/>
比如<code>WKT</code>使用<code>ol.format.WKT.readFeature</code></p>

<p><code>readFeature</code>返回的是<code>ol.Feature</code>的数组，可以通过遍历其来获得feature对象，从而按需求修改或者挂载监听事件。</p>

<h3 id="toc_8">添加单个feature</h3>

<p>如果现有的数据是geoJson等标准格式的数据，可以通过<code>ol.format</code>中的类进行转换。如果有需求则使用<code>ol.proj.transform</code>进行坐标系转换。</p>

<pre><code>// 返回单个feature对象
var feature = ol.format.GeoJSON.readFeature(data)

// 添加到source
vectorSource.addFeature(feature);
</code></pre>

<p>如果拿到的是经纬度信息，添加一个polygon</p>

<pre><code>// data 是一个coordinates的二维数组 需要注意
var feature = new ol.feature(new ol.geom.Polygon(data));
</code></pre>

<h2 id="toc_9">修改feature</h2>

<p>介绍如何修改feature以及挂载监听事件。</p>

<h3 id="toc_10">初始化修改添加、修改交互</h3>

<pre><code>// 声明选择交互
 var select = new ol.interaction.Select({
      // 根据 feature editable 选项来判断是否可以选中
      filter: function(feature) {
        if (_this._featureMap[feature.getId()].editable) {
          return true;
        }
      }
    });

// 得到被选中元件的对象
var selected = select.getFeatures();

// 声明修改交互，可以修改被选中的feature
var modify = new ol.interaction.Modify({
  features: selected
});

// 当新元件被选中时触发
selected.on(&#39;add&#39;, event =&gt; {
  var feature = event.element
})

// 当元件被取消选中时触发，一般把元件的修改回调放在这
    selected.on(&#39;remove&#39;, evt =&gt; {
      var feature = evt.element;
      var fid = feature.getId();
      // 判断元件是否被修改还是需要feature的change事件
      console.log(fid);
    });

// 在interactions中添加
this._map = new ol.Map({
      layers: [vector],
      interactions: ol.interaction.defaults({
        altShiftDragRotate: false,
        dragPan: false,
        rotate: false
      }).extend([new ol.interaction.DragPan({kinetic: null}), select, modify]),
      target: $olMapDiv,
      view: this._view
    });
    
</code></pre>

<p>一般来说如果需要后续对feature进行操作，可以使用<code>getId</code>方法拿到<code>feature</code>的<code>id</code>，可以通过<code>setId</code>来设置自己想要的<code>id</code>，否则会自动生成。 将<code>id</code>存在常驻的对象中供以后使用。</p>

<p>假设拿到<code>ol.Feature</code>对象 <code>feature</code></p>

<pre><code>feature.on(&#39;change:geometry&#39;, function(e){
  var feature = e.element;
  // do what you want  比如标记元件已被修改
})
</code></pre>

<p>需要注意的是这个<code>onChange</code>事件在修改的过程中会不断地触发，如果需要的是修改完成之后的回调，需要使用<code>select</code>的<code>remove</code>事件。</p>

<pre><code>select.getFeatures().on(&#39;remove&#39;, function(e){})
</code></pre>

<h3 id="toc_11">修改feature对象</h3>

<p>设置id</p>

<pre><code>feature.setId(id)
</code></pre>

<p>得到<code>geometry</code>对象</p>

<pre><code>var geometry = feature.getGeometry();
// 通过调用geometry类的方法修改元件坐标
</code></pre>

<p>feature to string</p>

<pre><code>var format = new ol.format.GeoJSON();
format.writeFeature(feature);
</code></pre>

<h2 id="toc_12">需要注意的地方</h2>

<ul>
<li>openlayers默认的坐标系是<code>&#39;EPSG:3857&#39;</code>，标准经纬度坐标系是<code>&#39;EPSG:4326&#39;</code></li>
<li>看openlayer文档最重要的技巧是注意<strong>类型</strong></li>
<li>geometry接受的coordinates其实是一个三维数组，一定要注意</li>
</ul>

<h2 id="toc_13">常用操作</h2>

<h3 id="toc_14">坐标系转换</h3>

<h4 id="toc_15">根据当前坐标系与目标坐标系进行转换。</h4>

<p><code>ol.proj.transform(coordinate, source, destination)</code><br/>
<code>coordinate</code> 在文档中得类型是 <code>Coordinate</code>其实就是一个有横纵坐标组成的数组，因此一定要注意官方文档中得数据类型。<br/>
<code>source</code> 当前坐标编码  string类型<br/>
<code>destination</code> 目标坐标编码 string类型</p>

<h4 id="toc_16">从经纬度转化到指定坐标系</h4>

<p><code>ol.proj.fromLonLat(coordinate, opt_projection)</code><br/>
<code>opt_projection</code> 目标坐标编码 string类型</p>

<h4 id="toc_17">从某坐标转经纬度</h4>

<p><code>ol.proj.toLonLat(coordinate, opt_projection)</code></p>

<h3 id="toc_18">数据格式化</h3>

<p><code>ol.format</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redux basic tutorial]]></title>
    <link href="http://yeatszhang.github.io/14423829784031.html"/>
    <updated>2015-09-16T13:56:18+08:00</updated>
    <id>http://yeatszhang.github.io/14423829784031.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>本文的读者为了解flux概念，熟悉react，了解es6语法的同学</p>
</blockquote>

<p><code>redux</code> 是最近很火的一个 <code>flux</code> 框架，短短的一个月现在已经有2900+的 star 了，watch之后每天收到几百封 pr 的邮件，废话就不多说了。<br/>
为什么要用 <code>redux</code> ，请看连接 <a href="https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31">The Evolution of Flux Frameworks</a>。</p>

<p><strong>主要特点</strong></p>

<ul>
<li>Everything (Stores, Action Creators, configuration) is hot reloadable. —— 配合起 hotloader 应该特别爽，虽然现在用的是 <code>browserify</code>，好处感觉并不明显。</li>
<li><code>store</code> 中的数据不受限制，可以是 <code>number</code> <code>object</code> <code>array</code> 等等，废话，因为它的 <code>store</code> 只是简单的函数。</li>
<li>提供 <code>devtools</code> ，监控 <code>action</code> 的触发以及 <code>state</code> 的变化。</li>
<li>源码清晰简单，轻量级，根本不需要文档，直接看源码就行了....缺点就是如果看不懂源码，光看文档会觉得不够清晰。</li>
<li><code>api</code> 很精简，不用记茫茫多的 <code>api</code></li>
<li>every thing is simple function</li>
<li><code>connecter</code> 与 <code>provider</code> 这两个东西用起来总觉得很繁琐，不那么优雅。</li>
</ul>

<p>下面通过写的一个简单counter的例子 介绍 <code>redux</code> 的核心方法以及一些需要注意的地方。</p>

<ul>
<li>同步与异步两种actionCreator</li>
<li>middleware的使用</li>
<li>dispatch actions </li>
<li>拿到并同步state</li>
</ul>

<p>代码放在<a href="https://github.com/yeatszhang/redux-tutorial">https://github.com/yeatszhang/redux-tutorial</a>， 需要安装gulp </p>

<p>代码是基于分支 <code>v1.0.0-rc</code> api略微有些区别，详情见 <a href="https://github.com/gaearon/redux/pull/195">Breaking API changes for 1.0</a>。</p>

<h2 id="toc_0">actionsCreator</h2>

<p>actions creator 是用来生成 action 的函数，在默认情况下可以接受返回<code>object</code>或者<code>function</code> 的函数，很多人学习flux的时候把action与actionCreator弄混淆....：</p>

<pre><code>// 直接返回object
actionCreators.addTodo = function(text) {
  return {
    type: types.ADD_TODO,
    text
  };
}

// 返回函数
actionCreators.incrementAsync = function() {
  return (dispatch, getState) =&gt; {
    // actionCreator中可以通过getState获得当前的state
    console.log(getState());
    // 异步action
    setTimeout(() =&gt; {
      dispatch({
        type: INCREMENT_COUNTER2,
      });
    }, 1000);
  };
};

</code></pre>

<p>在没有使用任何 <code>middleware</code> 的情况下，只有这有两种 <code>action</code> 可以被 <code>dispatch</code>。</p>

<h2 id="toc_1">app</h2>

<p>在动态内容的最外层应该使用Provider进行包裹，provider接收store作为参数，注意children是一个<code>函数</code>并不是<code>reactElement</code>。<br/>
<code>provider</code>将store作为context往子节点进行传递，并实现<code>store</code>的热替换。因此在provider内的组件其实可以不通过connect来拿到dispatch以及state，而直接通过context拿到store对象，不过作者不推荐这么做。</p>

<pre><code>import React from &#39;react&#39;;
import { createStore, applyMiddleware, combineReducers } from &#39;redux&#39;;
// redux midlleware repositories
import thunk from &#39;redux-thunk&#39;;
// 将 redux 与 react 相关的部分，如 connector provider 单独抽取出来
import { Provider } from &#39;react-redux&#39;;
import reducers from &#39;../reducers&#39;;
import CounterApp from &#39;./CounterApp.js&#39;;
import logMiddleware from &#39;../middleWares/logMiddleware.js&#39;;

const reducer = combineReducers(reducers);
const createStoreWithMiddleware = applyMiddleware(thunk, logMiddleware)(createStore);
const store = createStoreWithMiddleware(reducer);
// 使用middleWare thunk， 如果没有自定义中间层的需求可以直接写
// const store = createStore(reducer);

class App extends React.Component {
  render() {
    return (
      &lt;Provider store={store}&gt;
        {() =&gt; &lt;CounterApp /&gt;}
      &lt;/Provider&gt;
    );
  }
}
</code></pre>

<h2 id="toc_2">smart component</h2>

<p>smart component拥有两个特点：</p>

<ol>
<li>自动关联store中的state并自动re-render</li>
<li>可以通过dispatch来分发事件，从而触发store的更新</li>
</ol>

<p>刚接触redux的同学肯定会觉得这个connect很难以理解。还是在代码里面说把。。。</p>

<pre><code>/**
 * Created by yichizhang on 15/7/26.
 */

import React, { Component } from &#39;react&#39;;
import { bindActionCreators } from &#39;redux&#39;;
import { Connector } from &#39;react-redux&#39;;
import Counter from &#39;../components/Counter&#39;;
import actionCreators1 from &#39;../actionCreators/actionCreators1.js&#39;;
import actionCreators2 from &#39;../actionCreators/actionCreators2.js&#39;;

// state 是各reducer中state的集合
function select(state) {
  // 从各reducer中挑选出component需要监听的state
  return {
    counter1: state.reducer1.counter,
    counter2: state.reducer2.counter,
  };
}

export default class CounterApp extends Component {
  // select函数的返回值会与dispatch组装程一个object作为参数
  // 从这里看出connector就是帮忙拿到provider中store的dispatch方法以及挑选出需要使用的state
  renderChild({ counter1, counter2, dispatch}) {
    // 个人觉得这样使用action十分不方便，尤其是当组件只需要触发actions不需要监听store的变化的时候。我会偷懒通过context去拿到dispatch~~
    const actions1 = bindActionCreators(actionCreators1, dispatch);
    const actions2 = bindActionCreators(actionCreators2, dispatch);
    const props = { ...actions1, ...actions2, counter1, counter2 };
    // 所有的action以及state都会以props的形式提供给Counter，然后在Counter里面就可以为所欲为了~
    return &lt;Counter {...props} /&gt;;
  }

  render() {
    return (
      &lt;Connector select={select}&gt;
        {this.renderChild}
      &lt;/Connector&gt;
    );
  }
}

</code></pre>

<h2 id="toc_3">reducer</h2>

<p>redux认为程序员不需要去写store中的逻辑而只需要写明对state的处理逻辑就好：<br/>
<code><br/>
old  sate =&gt; action  =&gt; new state<br/>
</code><br/>
这是一个完全同步的过程。reducer只需要声明初始状态以及state在接收到action之后的改变规则就可以了。</p>

<pre><code>import React from &#39;react/addons&#39;;
import {INCREMENT_COUNTER1, DECREMENT_COUNTER1} from &#39;../constants/actionsTypes.js&#39;;
const update = React.addons.update;

// state可以是任何类型
const initialState = {
  counter: 0,
};

// reducer只是一个简单的switch方法
export default function counter(state = initialState, action = null) {
  switch (action.type) {
    case INCREMENT_COUNTER1:
      // 需要注意的是connector当select中的state发生变化时会做一个shallow equal的操作，
      // 所以如果需要操作引用值的时候一定不能直接赋值，需要使用addon中的update或者immutable.js，知道看到这两个工具又不想继续学了..其实很简单
      // 这样可以大大避免重复的render，从而提高性能
      return update(state, {
        counter: {
          $set: state.counter + 1,
        },
      });
    case DECREMENT_COUNTER1:
      return update(state, {
        counter: {
          $set: state.counter - 1,
        },
      });
    default:
      return state;
  }
}

</code></pre>

<h2 id="toc_4">middleWare</h2>

<p>感兴趣的同学可以看看，一般来说默认的thunk就够用了。我在例子里加了个log的中间层</p>

<pre><code>// 打印触发的action
function logMiddleware() {
  // 这里的next是下一个middleWare
  return function(next) {
    return function(action) {
      // 打印此action并使用下一个middleWare处理该action
      console.log(action);
      next(action);
    };
  };
}

export default logMiddleware;

// 下面是默认的thunk middleWare

function thunkMiddleware(_ref) {
  var dispatch = _ref.dispatch;
  var getState = _ref.getState;

  return function (next) {
    return function (action) {
      // 如果是函数则将dispatch与getState作为参数执行函数，否则交给写一个middleware处理
      return typeof action === &#39;function&#39; ? action(dispatch, getState) : next(action);
    };
  };
}
</code></pre>

<h2 id="toc_5">结语</h2>

<p>其实redux不明白的地方直接看源码更好，redux的代码量很小而且组织也很清晰，建议大家都去看，不过作者貌似函数式编程的思维很重，大量使用修饰器的语法，还有reduce~ 挺绕的~</p>

<p>之后会总结自己阅读redux源码的一些心得，以及各功能模块的实现原理~</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React context 填坑]]></title>
    <link href="http://yeatszhang.github.io/14423828192767.html"/>
    <updated>2015-09-16T13:53:39+08:00</updated>
    <id>http://yeatszhang.github.io/14423828192767.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>文本是为了说清<code>react context</code>目前的机制是<code>owner context</code> 而不是我们以为的<code>parent context</code> 机制，并说明这两者的区别。如果已经躺过这个坑的同学就可以直接略过。</p>
</blockquote>

<h2 id="toc_0">什么是 context</h2>

<p>context是为了解决component之间通信的上下文机制，该api目前并未定稿所以react并没有开放出来。最用有大量需要共享上下文的场景才去了解这个api，然后也成功被饶了进去....<br/>
介绍与用法这篇文章<a href="https://www.tildedave.com/2014/11/15/introduction-to-contexts-in-react-js.html">Introduction to Contexts in React.js</a>说得很清楚~</p>

<h2 id="toc_1">问题场景</h2>

<p>需要在Parent中声明context，在Children中拿到context并打印出来。</p>

<pre><code>var Children = React.createClass({
  contextTypes: {
    value: React.PropTypes.string
  },
  render: function() {
    return &lt;div&gt;{this.context.value || &#39;并没有context&#39;}&lt;/div&gt;;
  }
});

var Parent = React.createClass({
  childContextTypes: {
    value: React.PropTypes.string
  },
  getChildContext: function() {
    return { value: &#39;上下文&#39; };
  },
  render: function() {
    return (
      &lt;div&gt;
        {this.props.children}
      &lt;/div&gt;
    );
  }
});

var App = React.createClass({
  render: function() {
    return (
      &lt;Parent&gt;
        &lt;Children /&gt;
      &lt;/Parent&gt;
    );
  }
});

React.render(React.createElement(App), document.body);
</code></pre>

<p>这样执行完后屏幕上应该是『上下文』三个打字，但事实是</p>

<p><img src="./1438358517225.png" alt="Alt text"/></p>

<p>以及<code>warning</code><br/>
<img src="./1438358553997.png" alt="Alt text"/></p>

<p>那么问题来了，上下文为何失效了呢？！为什么Children拿不到Parent里面的context呢？！</p>

<h2 id="toc_2">find the problem</h2>

<p>各种google之后发现gaearon大神在<a href="https://github.com/facebook/react/issues/2112">issue</a>中的回复。<br/>
<img src="./1438358743716.png" alt="Alt text"/></p>

<p>原来现在0.13.3版本的react context的传递规则是owner规则，在刚才的例子中虽然<code>Children</code>的parent为<code>Parent</code>，但是<code>App</code>才是<code>Children</code>与parent共同的owner，this.context只能拿到owner传递规则的context。</p>

<blockquote>
<p>尼玛，跟想象中的不一样啊！你props、render的规则不都是Parent规则么！</p>
</blockquote>

<p>不继续吐槽，那么按照这个思路把context放在App上，Parent与Children应该都能成功拿到Context了吧。</p>

<p>代码是这样的：<br/>
```<br/>
/**<br/>
 * Created by yichizhang on 15/7/31.<br/>
 */<br/>
var React = require(&#39;react&#39;);</p>

<p>var Children = React.createClass({<br/>
  contextTypes: {<br/>
    value: React.PropTypes.string<br/>
  },<br/>
  render: function() {<br/>
    return <div>{this.context.value || &#39;并没有context&#39;}</div>;<br/>
  }<br/>
});</p>

<p>var Parent = React.createClass({<br/>
  contextTypes: {<br/>
    value: React.PropTypes.string<br/>
  },<br/>
  render: function() {<br/>
    return (<br/>
      <div><br/>
        {this.context.value &amp;&amp; &#39;可算拿到了...&#39; }<br/>
        {this.props.children}<br/>
      </div><br/>
    );<br/>
  }<br/>
});</p>

<p>var App = React.createClass({<br/>
  childContextTypes: {<br/>
    value: React.PropTypes.string<br/>
  },<br/>
  getChildContext: function() {<br/>
    return { value: &#39;上下文&#39; };<br/>
  },<br/>
  render: function() {<br/>
    return (<br/>
      <Parent><br/>
        <Children /><br/>
      </Parent><br/>
    );<br/>
  }<br/>
});</p>

<p>React.render(React.createElement(App), document.body);<br/>
```<br/>
结果是这样的：<br/>
<img src="./1438359248149.png" alt="Alt text"/></p>

<p>看来context成功被拿到，看到这里大家应该明白React context的机制了把。</p>

<h2 id="toc_3">how to get parent context</h2>

<p>虽然明白了原理，但是问题并没有解决。我就是希望Chilren拿到Parent中的context，而不是拿到App中的context啊。我目前一共找到了两种方式可以在现阶段获取parent context。</p>

<h3 id="toc_4">1. use the callback</h3>

<p>通过接收回调函数而不是react.element，然后在Parent中进行render，那么render的内容的owner自然就是Parent了，从而可以成功拿到Parent中的context。</p>

<pre><code>/**
 * Created by yichizhang on 15/7/31.
 */
var React = require(&#39;react&#39;);

var Children = React.createClass({
  contextTypes: {
    value: React.PropTypes.string
  },
  render: function() {
    return &lt;div&gt;{this.context.value || &#39;并没有context&#39;}&lt;/div&gt;;
  }
});

var Parent = React.createClass({
  childContextTypes: {
    value: React.PropTypes.string
  },
  getChildContext: function() {
    return { value: &#39;上下文&#39; };
  },
  render: function() {
    return (
      &lt;div&gt;
        {this.props.children() /* 注意这里是function，需要执行 */}
      &lt;/div&gt;
    );
  }
});

// parent接受回调函数，回调函数中的内容owner为parent
var App = React.createClass({
  render: function() {
    return (
      &lt;Parent&gt;
        {this.renderChild}
      &lt;/Parent&gt;
    );
  },
  renderChild: function() {
    return &lt;Children /&gt;;
  }
});

React.render(React.createElement(App), document.body);
</code></pre>

<p>实测可以成功拿到context。</p>

<h3 id="toc_5">2.通过this._reactInternalInstance</h3>

<p>这种方法虽然用起来很方便不过健壮性很差，等react更新之后没准又得改代码~<br/>
可以通过<code>this._reactInternalInstance._context.value</code>拿到该element的parent context。<code>this._reactInternalInstance._currentElement._context.value</code>就是默认的owner context。</p>

<pre><code>/**
 * Created by yichizhang on 15/7/31.
 */
var React = require(&#39;react&#39;);

var Children = React.createClass({
  contextTypes: {
    value: React.PropTypes.string
  },
  render: function() {
    return &lt;ul&gt;
      &lt;li&gt;{&#39;default context is: &#39; + this.context.value}&lt;/li&gt;
      &lt;li&gt;{&#39;parent context: &#39; + this._reactInternalInstance._context.value}&lt;/li&gt;
      &lt;li&gt;{&#39;owner context: &#39; + this._reactInternalInstance._currentElement._context.value}&lt;/li&gt;
    &lt;/ul&gt;;
  }
});

var Parent = React.createClass({
  childContextTypes: {
    value: React.PropTypes.string
  },
  getChildContext: function() {
    return { value: &#39;parent&#39; };
  },
  render: function() {
    return (
      &lt;div&gt;
        {this.props.children}
      &lt;/div&gt;
    );
  }
});

var App = React.createClass({
  childContextTypes: {
    value: React.PropTypes.string
  },
  getChildContext: function() {
    return { value: &#39;app&#39; };
  },
  render: function() {
    return (
      &lt;Parent&gt;
        &lt;Children /&gt;
      &lt;/Parent&gt;
    );
  },
});

React.render(React.createElement(App), document.body);
</code></pre>

<p>结果如下：<br/>
<img src="./1438360716769.png" alt="Alt text"/></p>

<h2 id="toc_6">context es6 写法</h2>

<p>由于同事问我es6下context怎么用，想到可能有些人也不清楚，在这里一并附上。个人不推荐使用es7语法。</p>

<pre><code>/**
 * Created by yichizhang on 15/7/31.
 */
import React from &#39;react&#39;;

class Children extends React.Component {

  // 如果不需要在构造函数中使用可以不写，没有影响
  constructor(props, context) {
    super(props, context);
    console.log(context);
  }
  render() {
    return &lt;ul&gt;
      &lt;li&gt;{&#39;default context is: &#39; + this.context.value}&lt;/li&gt;
      &lt;li&gt;{&#39;parent context: &#39; + this._reactInternalInstance._context.value}&lt;/li&gt;
      &lt;li&gt;{&#39;owner context: &#39; + this._reactInternalInstance._currentElement._context.value}&lt;/li&gt;
    &lt;/ul&gt;;
  }
}
Children.contextTypes = {
  value: React.PropTypes.string
};

class Parent extends React.Component {
  getChildContext() {
    return { value: &#39;parent&#39; };
  }

  render() {
    return (
      &lt;div&gt;
        {this.props.children}
      &lt;/div&gt;
    );
  }
}
Parent.childContextTypes = {
  value: React.PropTypes.string
};

class App extends React.Component {
  getChildContext() {
    return { value: &#39;app&#39; };
  }

  render() {
    return (
      &lt;Parent&gt;
        &lt;Children /&gt;
      &lt;/Parent&gt;
    );
  }
}
App.childContextTypes = {
  value: React.PropTypes.string
};

React.render(React.createElement(App), document.body);
</code></pre>

]]></content>
  </entry>
  
</feed>
